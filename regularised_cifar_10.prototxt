# ----------------------------------------------------------------------------
# Input
# ----------------------------------------------------------------------------
name: "regularised_cifar_10"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/jamie/caffe-rc3/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/jamie/caffe-rc3/examples/cifar10/cifar10_train_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "/home/jamie/caffe-rc3/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/jamie/caffe-rc3/examples/cifar10/cifar10_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}

# ----------------------------------------------------------------------------
# 32x32 convolution
# ----------------------------------------------------------------------------
layer {
  name: "conv_1"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "data"
  top: "conv_1"
}
layer {
  name: "conv_1_relu"
  type: "ReLU"
  bottom: "conv_1"
  top: "conv_1"
}

layer {
  name: "conv_2"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_1"
  top: "conv_2"
}
layer {
  name: "conv_2_relu"
  type: "ReLU"
  bottom: "conv_2"
  top: "conv_2"
}

# ----------------------------------------------------------------------------
# 32x32 -> 16x16 convolution
# ----------------------------------------------------------------------------
layer {
  name: "pool_conv_1"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_2"
  top: "pool_conv_1"
}
layer {
  name: "pool_conv_1_relu"
  type: "ReLU"
  bottom: "pool_conv_1"
  top: "pool_conv_1"
}

# ----------------------------------------------------------------------------
# 16x16 convolution
# ----------------------------------------------------------------------------
layer {
  name: "conv_3"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "pool_conv_1"
  top: "conv_3"
}
layer {
  name: "conv_3_relu"
  type: "ReLU"
  bottom: "conv_3"
  top: "conv_3"
}

layer {
  name: "conv_4"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_3"
  top: "conv_4"
}
layer {
  name: "conv_4_relu"
  type: "ReLU"
  bottom: "conv_4"
  top: "conv_4"
}

# ----------------------------------------------------------------------------
# 16x16 -> 8x8 convolution
# ----------------------------------------------------------------------------
layer {
  name: "pool_conv_2"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_4"
  top: "pool_conv_2"
}
layer {
  name: "pool_conv_2_relu"
  type: "ReLU"
  bottom: "pool_conv_2"
  top: "pool_conv_2"
}

# ----------------------------------------------------------------------------
# Top
# ----------------------------------------------------------------------------
layer {
  name: "conv_5"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "pool_conv_2"
  top: "conv_5"
}
layer {
  name: "conv_5_relu"
  type: "ReLU"
  bottom: "conv_5"
  top: "conv_5"
}

layer {
  name: "conv_6"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_5"
  top: "conv_6"
}
layer {
  name: "conv_6_relu"
  type: "ReLU"
  bottom: "conv_6"
  top: "conv_6"
}

layer {
  name: "conv_7"
  type: "Convolution"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 10
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv_6"
  top: "conv_7"
}
layer {
  name: "conv_7_relu"
  type: "ReLU"
  bottom: "conv_7"
  top: "conv_7"
}

# ----------------------------------------------------------------------------
# Output
# ----------------------------------------------------------------------------
layer {
  name: "pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 6
  }
  bottom: "conv_7"
  top: "pool"
}

layer {
  name: "ip"
  type: "InnerProduct"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "pool"
  top: "ip"
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip"
  bottom: "label"
  top: "loss"
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}